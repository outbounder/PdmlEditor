<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/halo"
				width="100%"
				mouseDown="onMouseDown(event)">
	<fx:Script>
		<![CDATA[
			import data.model.MultiModuleInfo;
			import data.model.MultiModuleMethodInfo;
			
			import flash.events.DataEvent;
			import flash.events.MouseEvent;
			
			import mx.collections.ArrayCollection;
			import mx.core.DragSource;
			import mx.core.UIComponent;
			import mx.managers.DragManager;
			
			import org.dassista.api.rest.as3.RestService;
			
			import spark.events.RendererExistenceEvent;
			
			[Bindable]
			private var moduleInfo:MultiModuleInfo;
						
			[Bindable]
			private var currentSelectedModuleMethod:ModuleMethodRenderer;
			
			public override function set data(value:Object) : void
			{
				super.data = value;
				this.moduleInfo = value as MultiModuleInfo;
			}
			
			private function onSelected():void
			{
				if(this.moduleInfo.moduleMethods == null)
				{
					var service:RestService = new RestService();
					service.setValue("moduleName", "org.dassista.modules.ModuleInfo");
					service.setValue("methodName", "listMethods");
					service.setValue("target", this.moduleInfo.classname);
					
					service.load(onModuleMethodsInfo);
				}
			}
			
			private function onModuleMethodsInfo(e:DataEvent):void
			{
				var data:XML = XML("<result>"+e.data+"</result>");
				if(data.name()=="ioerror")
					throw Error(e.data);
				
				this.moduleInfo.moduleMethods = new ArrayCollection();
				for each(var methodXML:XML in data..method)
				{
					var method:MultiModuleMethodInfo = new MultiModuleMethodInfo(methodXML);
					this.moduleInfo.moduleMethods.addItem(method);
				}
			}
			
			protected function onModuleMethodRendererAdd(event:RendererExistenceEvent):void
			{
				event.renderer.addEventListener(MouseEvent.CLICK, onRendererClick);
			}
			
			protected function onModuleMethodRendererRemove(event:RendererExistenceEvent):void
			{
				event.renderer.removeEventListener(MouseEvent.CLICK, onRendererClick);
			}
			
			private function onRendererClick(e:MouseEvent):void
			{
				if(e.target is ModuleMethodRenderer)
				{
					if(this.currentSelectedModuleMethod != null)
						this.currentSelectedModuleMethod.selected = false;
					this.currentSelectedModuleMethod = e.target as ModuleMethodRenderer;
					this.currentSelectedModuleMethod.selected = true;
				}
			}
			
			private function onMouseDown(e:MouseEvent):void
			{
				if(e.target == this)
				{
					var dragSource:DragSource = new DragSource();
					dragSource.addData(this.moduleInfo, "module");
					DragManager.doDrag(e.target as UIComponent, dragSource, e);
				}
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="hovered"/>
		<s:State name="selected" enterState="onSelected()" />
	</s:states>
	
	<s:Rect width="100%" height="100%" includeIn="selected,hovered">
		<s:fill>
			<s:SolidColor color="gray" />
		</s:fill>
	</s:Rect>
	
	<s:VGroup width="100%" mouseEnabled="false">
		<s:RichText text="{this.moduleInfo.classname}" width="100%" mouseChildren="false" mouseEnabled="false" />
		<s:DataGroup dataProvider="{this.moduleInfo.moduleMethods}" width="100%" minHeight="0"
				includeIn="selected" itemRenderer="{new ClassFactory(ModuleMethodRenderer)}"
				rendererAdd="onModuleMethodRendererAdd(event)"
				rendererRemove="onModuleMethodRendererRemove(event)">
			<s:layout>
				<s:VerticalLayout gap="1" />
			</s:layout>
		</s:DataGroup>
		<mx:Spacer width="100%" height="2" includeIn="selected" mouseChildren="false" mouseEnabled="false" />
	</s:VGroup>
	
</s:ItemRenderer>
