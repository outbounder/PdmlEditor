<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/halo"
				width="100%">
	<fx:Script>
		<![CDATA[
			import flash.events.DataEvent;
			import flash.events.MouseEvent;
			
			import haxe.org.dassista.api.rest.as3.RestService;
			
			import mx.collections.ArrayCollection;
			
			import spark.events.RendererExistenceEvent;
			[Bindable]
			private var moduleInfoXML:XML;
			[Bindable]
			private var moduleName:String;
			[Bindable]
			private var moduleMethods:ArrayCollection;
			
			[Bindable]
			private var currentSelectedModuleMethod:ItemRenderer;
			
			public override function set data(value:Object) : void
			{
				super.data = value;
				this.moduleInfoXML = XML(value);
				this.moduleName = this.moduleInfoXML..module[0].@name;
			}
			
			private function onSelected():void
			{
				if(this.moduleMethods == null)
				{
					var service:RestService = new RestService();
					service.setValue("module", "haxe.org.dassista.tools.ModuleInfo");
					service.setValue("method", "listMethods");
					service.setValue("target", this.moduleName);
					
					service.load(onModuleMethodsInfo);
				}
			}
			
			private function onModuleMethodsInfo(e:DataEvent):void
			{
				var data:XML = XML("<result>"+e.data+"</result>");
				if(data.name()=="ioerror")
					throw Error(e.data);
				
				this.moduleMethods = new ArrayCollection();
				for each(var methodXML:XML in data..method)
				{
					this.moduleMethods.addItem(methodXML);
				}
			}
			
			protected function onModuleMethodRendererAdd(event:RendererExistenceEvent):void
			{
				event.renderer.addEventListener(MouseEvent.CLICK, onRendererClick);
			}
			
			protected function onModuleMethodRendererRemove(event:RendererExistenceEvent):void
			{
				event.renderer.removeEventListener(MouseEvent.CLICK, onRendererClick);
			}
			
			private function onRendererClick(e:MouseEvent):void
			{
				if(this.currentSelectedModuleMethod != null)
					this.currentSelectedModuleMethod.currentState = "normal";
				this.currentSelectedModuleMethod = e.currentTarget as ItemRenderer;
				this.currentSelectedModuleMethod.currentState = "selected";
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="hovered"/>
		<s:State name="selected" enterState="onSelected()" />
	</s:states>
	
	<s:Rect width="100%" height="100%" includeIn="selected,hovered">
		<s:fill>
			<s:SolidColor color="gray" />
		</s:fill>
	</s:Rect>
	
	<s:VGroup width="100%">
		<s:RichText text="{this.moduleName}" width="100%" />
		<s:DataGroup dataProvider="{this.moduleMethods}" width="100%" minHeight="0"
				includeIn="selected" itemRenderer="{new ClassFactory(ModuleMethodRenderer)}"
				rendererAdd="onModuleMethodRendererAdd(event)"
				rendererRemove="onModuleMethodRendererRemove(event)">
			<s:layout>
				<s:VerticalLayout gap="1" />
			</s:layout>
		</s:DataGroup>
	</s:VGroup>
	
</s:ItemRenderer>
