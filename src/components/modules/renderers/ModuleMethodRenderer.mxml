<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/halo"
				width="100%"
				mouseDown="onMouseDown(event)">
	
	<fx:Script>
		<![CDATA[
			import data.model.MultiModuleMethodArgInfo;
			import data.model.MultiModuleMethodInfo;
			
			import mx.collections.ArrayCollection;
			import mx.core.DragSource;
			import mx.core.UIComponent;
			import mx.managers.DragManager;
			
			import org.dassista.api.rest.as3.RestService;
			
			[Bindable]
			private var methodInfo:MultiModuleMethodInfo;
			
			public override function set data(value:Object) : void
			{
				super.data = value;
				this.methodInfo = value as MultiModuleMethodInfo;
			}
			
			private function onSelected():void
			{
				if(this.methodInfo.methodArgs == null)
				{
					var service:RestService = new RestService();
					service.setValue("moduleName", "org.dassista.modules.ModuleInfo");
					service.setValue("methodName", "execute");
					service.setValue("target", this.methodInfo.moduleClassname);
					service.setValue("m", this.methodInfo.methodName);
					service.load(onModuleMethodsInfo);
				}
			}
			
			private function onModuleMethodsInfo(e:DataEvent):void
			{
				var data:XML = XML(e.data);
				if(data.name()=="ioerror")
					throw Error(e.data);
				
				this.methodInfo.methodArgs = new ArrayCollection();
				var args:XML = XML(e.data);
				for each(var arg:XML in args..attributes[0].children())
				{
					if(arg.name() != "return")
						this.methodInfo.methodArgs.addItem(new MultiModuleMethodArgInfo(this.methodInfo,arg));
				}
			}
			
			private function onMouseDown(e:MouseEvent):void
			{
				if(e.target == this)
				{
					var dragSource:DragSource = new DragSource();
					dragSource.addData(this.methodInfo, "moduleMethod");
					DragManager.doDrag(e.target as UIComponent, dragSource, e);
				}
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="hovered"/>
		<s:State name="selected" enterState="onSelected()" />
	</s:states>
	
	<s:Rect width="100%" height="100%" includeIn="selected,hovered">
		<s:fill>
			<s:SolidColor color="black" />
		</s:fill>
	</s:Rect>
	
	<s:VGroup width="100%" mouseEnabled="false">
		<s:RichText text="{this.methodInfo.methodName}" width="100%" color="white" mouseEnabled="false" mouseChildren="false"/>
		<s:DataGroup dataProvider="{this.methodInfo.methodArgs}" width="100%" 
				includeIn="selected" itemRenderer="{new ClassFactory(ModuleMethodArgRenderer)}">
			<s:layout>
				<s:VerticalLayout gap="1" />
			</s:layout>
		</s:DataGroup>
	</s:VGroup>
</s:ItemRenderer>
