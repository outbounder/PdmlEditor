<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/halo"
	width="100%"
	mouseDown="onMouseDown(event)"
	dragEnter="onDragEnter(event)"
	dragDrop="onDragDrop(event)" xmlns:pdml="components.pdml.*">

	<fx:Script>
		<![CDATA[
			import data.model.MultiModuleMethodArgInfo;
			import data.model.PdmlFileNode;
			
			import flash.events.Event;
			import flash.events.MouseEvent;
			
			import mx.core.DragSource;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			
			import spark.components.DataGroup;
			
			[Bindable]
			private var pdmlNode:PdmlFileNode;
			
			public override function set data(value:Object) : void
			{
				super.data = value;
				this.pdmlNode = value as PdmlFileNode;
			}
			
			private function onDragEnter(e:DragEvent):void
			{
				if(e.dragSource.hasFormat("methodArg"))
				{
					var methodArg:MultiModuleMethodArgInfo = e.dragSource.dataForFormat("methodArg") as MultiModuleMethodArgInfo;
					if(methodArg.ownerMethod.methodName == this.pdmlNode.method && 
						methodArg.ownerMethod.moduleClassname == this.pdmlNode.classname)
							DragManager.acceptDragDrop(e.currentTarget as UIComponent);
				}
			}
			
			private function onDragDrop(e:DragEvent):void
			{
				if(e.dragSource.hasFormat("methodArg"))
				{
					var methodArg:MultiModuleMethodArgInfo = e.dragSource.dataForFormat("methodArg") as MultiModuleMethodArgInfo;
					this.pdmlNode.args.addItem(methodArg.asPdmlFileNodeArg());
				}
			}
			
			private function onMouseDown(e:MouseEvent):void
			{
				if(e.target == this)
				{
					var dragSource:DragSource = new DragSource();
					dragSource.addData(this.pdmlNode, "pdmlNode");
					DragManager.doDrag(this, dragSource, e);
				}
			}
			
			private function onDelete():void
			{
				var event:Event = new Event(Event.CLEAR);
				this.dispatchEvent(event);
			}
		]]>
	</fx:Script>

	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
    <s:states>
        <s:State name="normal"/>
        <s:State name="hovered" />
        <s:State name="selected" />
    </s:states>
    
	<s:Rect width="100%" height="100%" includeIn="selected,hovered" >
		<s:fill>
			<s:SolidColor color="gray" />
		</s:fill>
	</s:Rect>
	
	<s:VGroup width="100%" mouseEnabled="false">
		<s:RichText text="&lt;{this.pdmlNode.method} classname=&quot;{this.pdmlNode.classname}&quot;&gt;" 
					width="100%" height="15" verticalAlign="middle"
					mouseEnabled="false" mouseChildren="false"/>
		<s:Group width="100%">
			<s:DataGroup left="20" width="100%" dataProvider="{this.pdmlNode.args}"
						 itemRenderer="{new ClassFactory(NodeArgRenderer)}">
				<s:layout><s:VerticalLayout gap="2" /></s:layout>
			</s:DataGroup>
		</s:Group>
		<s:RichText text="&lt;/{this.pdmlNode.method}&gt;" 
					width="100%" height="15" verticalAlign="middle"
					mouseEnabled="false" mouseChildren="false"/>	
	</s:VGroup>
	
	<s:Button label="delete" includeIn="hovered" right="0" verticalCenter="0" click="onDelete()" />
</s:ItemRenderer>
