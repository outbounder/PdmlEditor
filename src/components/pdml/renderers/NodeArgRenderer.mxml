<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/halo"
				width="100%"
				dragEnter="onDragEnter(event)"
				dragOver="onDragOver(event)"
				dragExit="onDragExit(event)"
				dragDrop="onDragDrop(event)">

	<fx:Script>
		<![CDATA[
			import data.RuntimeContext;
			import data.model.PdmlFileNodeArg;
			
			import haxe.org.dassista.api.rest.as3.RestService;
			
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			
			[Bindable]
			private var nodeArg:PdmlFileNodeArg;
			
			public override function set data(value:Object) : void
			{
				super.data = value;
				this.nodeArg = value as PdmlFileNodeArg;
			}
			
			private function onDragEnter(e:DragEvent):void
			{
				if(e.dragSource.hasFormat("treeItems"))
				{
					var treeItems:Array = e.dragSource.dataForFormat("treeItems") as Array;
					if(treeItems.length == 1)
					{
						DragManager.acceptDragDrop(e.currentTarget as UIComponent);
					}
				}
			}
			
			private function onDragDrop(e:DragEvent):void
			{
				if(e.dragSource.hasFormat("treeItems"))
				{
					var treeItems:Array = e.dragSource.dataForFormat("treeItems") as Array;
					var file:File = treeItems[0] as File;
					var context:RuntimeContext = new RuntimeContext();
					this.nodeArg.argValue = RestService.getClassPath(context.rootFolder, file.nativePath);
					
					this.onDragExit(e);
				}
			}
			
			private function onDragOver(event:DragEvent):void
			{
				if(event.dragSource.hasFormat("treeItems"))
					this.currentState = 'hovered';
			}
			
			private function onDragExit(event:DragEvent):void
			{
				if(!this.selected)
					this.currentState = 'normal';
				else
					this.currentState = 'selected';
			}
		]]>
	</fx:Script>
	
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
    <s:states>
        <s:State name="normal"/>
        <s:State name="hovered" />
        <s:State name="selected" />
    </s:states>
    
    <s:Rect width="100%" height="100%" includeIn="hovered">
		<s:fill>
			<s:SolidColor color="black" />
		</s:fill>
	</s:Rect>
	
	<s:HGroup verticalAlign="middle">
		<s:RichText text="&lt;{this.nodeArg.argName}&gt;" color.hovered="gray"  />
		<s:RichEditableText id="argValueView" text="@{this.nodeArg.argValue}" color.hovered="gray" />
		<s:RichText text="&lt;/{this.nodeArg.argName}&gt;" color.hovered="gray" />
	</s:HGroup>
	
</s:ItemRenderer>
