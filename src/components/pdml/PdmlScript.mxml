<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/halo" 
		 xmlns:pdml="components.pdml.*" 
		 xmlns:components="components.*"
		 currentState="scriptView"
		 rightClick="onRightClick()"
		 dragEnter="onDragEnter(event)"
		 dragDrop="onDragDrop(event)"
		 mouseDown="onMouseDownHeader(event)">
	
	<fx:Script>
		<![CDATA[
			import data.model.MultiModuleInfo;
			import data.model.MultiModuleMethodInfo;
			import data.model.PdmlFile;
			import data.model.PdmlFileNode;
			
			import flash.events.MouseEvent;
			
			import mx.core.DragSource;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			
			[Bindable]
			private var pdmlFile:PdmlFile;
			[Bindable]
			private var pdmlFileName:String;
			
			private function onRightClick():void
			{
				this.currentState = 'optionsView';
			}
			
			private function onNewEmptyPdml():void
			{
				this.pdmlFile = new PdmlFile(null);
				this.currentState = 'scriptView';
			}
			
			private function onDragEnter(event:DragEvent):void
			{
				if(event.dragSource.hasFormat("treeItems"))
				{
					var treeItems:Array = event.dragSource.dataForFormat("treeItems") as Array;
					if(treeItems.length == 1)
					{
						var item:File = treeItems[0] as File;
						if(item.extension == "pdml")
							DragManager.acceptDragDrop(event.currentTarget as UIComponent);
					}
				}
				if(event.dragSource.hasFormat("module") || event.dragSource.hasFormat("moduleMethod"))
				{
					if(this.pdmlFile == null)
						this.pdmlFile = new PdmlFile(null);
					DragManager.acceptDragDrop(event.currentTarget as UIComponent);
				}
			}
			
			private function onDragDrop(event:DragEvent):void
			{
				if(event.dragSource.hasFormat("treeItems"))
				{
					var file:File = event.dragSource.dataForFormat("treeItems")[0] as File;
					var stream:FileStream = new FileStream();
					stream.open(file, FileMode.READ);
					var contents:String = stream.readUTFBytes(stream.bytesAvailable);
					var xml:XML = new XML(contents);
					
					this.pdmlFile = new PdmlFile(xml);
					this.pdmlFile.name = file.name;
				}
				var newNode:PdmlFileNode;
				if(event.dragSource.hasFormat("module"))
				{
					var moduleInfo:MultiModuleInfo = event.dragSource.dataForFormat("module") as MultiModuleInfo;
					newNode = moduleInfo.asPdmlFileNode();
					this.pdmlFile.nodes.addItem(newNode);
				}
				if(event.dragSource.hasFormat("moduleMethod"))
				{
					var methodInfo:MultiModuleMethodInfo = event.dragSource.dataForFormat("moduleMethod") as MultiModuleMethodInfo;
					newNode = methodInfo.asPdmlFileNode();
					this.pdmlFile.nodes.addItem(newNode);
				}
			}
			
			private function onMouseDownHeader(e:MouseEvent):void
			{
				if(e.target == this)
				{
					var dragSource:DragSource = new DragSource();
					dragSource.addData(this.pdmlFile, "pdmlFile");
					DragManager.doDrag(this, dragSource, e);
				}
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="scriptView" />
		<s:State name="optionsView" />
	</s:states>
	
	<s:Rect width="100%" height="100%" alpha="0.5">
		<s:fill>
			<s:SolidColor color="gray"/>
		</s:fill>
	</s:Rect>

	<pdml:PdmlScriptEditor id="editorView" width="100%" 
			   pdmlFile="@{this.pdmlFile}"
			   includeIn="scriptView"/>
	
	<s:VGroup horizontalAlign="center" verticalCenter="0" width="100%" includeIn="optionsView">
		<s:Button label="create empty pdml" width="200" click="onNewEmptyPdml()"/>
		<s:Button label="cancel" width="200" click="{this.currentState = 'scriptView'}"/>
	</s:VGroup>
</s:Group>
