<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/halo"
		 dragEnter="onDragEnter(event)"
		 dragDrop="onDragDrop(event)"
		 dragOver="onDragOver(event)">
	
	<fx:Script>
		<![CDATA[
			import components.pdml.renderers.NodeArgRenderer;
			import components.pdml.renderers.NodeRenderer;
			
			import data.model.PdmlFile;
			import data.model.PdmlFileNode;
			import data.model.PdmlFileNodeArg;
			
			import mx.core.IVisualElement;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			
			import spark.components.supportClasses.ItemRenderer;
			import spark.events.RendererExistenceEvent;
			
			[Bindable]
			public var pdmlFile:PdmlFile;
			
			private var currentSelectedPdmlNode:ItemRenderer;
			private var lastHoveredPdmlNode:int;
				
			private function onDragEnter(event:DragEvent):void
			{
				if(event.dragSource.hasFormat("pdmlNode"))
				{
					if(this.pdmlFile == null)
						this.pdmlFile = new PdmlFile(null);
					this.lastHoveredPdmlNode = -1;
					DragManager.acceptDragDrop(event.currentTarget as UIComponent);
				}
			}
			
			private function onDragOver(event:DragEvent):void
			{
				this.lastHoveredPdmlNode = -1;
			}
			
			protected function onDragDrop(event:DragEvent):void
			{
				if(event.dragSource.hasFormat("pdmlNode"))
				{
					var src:ItemRenderer = event.dragInitiator as ItemRenderer;
					var srcData:Object = src.data;
					
					this.pdmlFile.nodes.removeItemAt(this.pdmlFile.nodes.getItemIndex(srcData));
					if(this.lastHoveredPdmlNode != -1)
						this.pdmlFile.nodes.addItemAt(srcData, this.lastHoveredPdmlNode);
					else
						this.pdmlFile.nodes.addItem(srcData);
				}
			}
			
			private function getAsPdmlNodeView(item:Object):IFactory
			{
				if(item is PdmlFileNode)
					return new ClassFactory(NodeRenderer);
				else
				if(item is PdmlFileNodeArg)
					return new ClassFactory(NodeArgRenderer);
				else
					return new ClassFactory(NodeRenderer);
			}
			
			protected function onRendererAdd(event:RendererExistenceEvent):void
			{
				event.renderer.addEventListener(DragEvent.DRAG_OVER, onRendererDragOver);
				event.renderer.addEventListener(DragEvent.DRAG_EXIT, onRendererDragExit);
				event.renderer.addEventListener(MouseEvent.CLICK, onRendererClick);
			}
			
			protected function onRendererRemove(event:RendererExistenceEvent):void
			{
				event.renderer.removeEventListener(DragEvent.DRAG_OVER, onRendererDragOver);
				event.renderer.removeEventListener(DragEvent.DRAG_EXIT, onRendererDragExit);
				event.renderer.removeEventListener(MouseEvent.CLICK, onRendererClick);
			}
			
			private function onRendererClick(e:MouseEvent):void
			{
				if(this.currentSelectedPdmlNode != null)
					this.currentSelectedPdmlNode.selected = false;
				
				this.currentSelectedPdmlNode = e.currentTarget as ItemRenderer;
				this.currentSelectedPdmlNode.selected = true;
			}
			
			private function onRendererDragOver(e:DragEvent):void
			{
				(e.target as UIComponent).currentState = "hovered";
				this.lastHoveredPdmlNode = this.pdmlNodesView.getElementIndex(e.target as IVisualElement);
			}
			
			private function onRendererDragExit(e:DragEvent):void
			{
				(e.target as UIComponent).currentState = "normal";
			}

		]]>
	</fx:Script>
	
	<s:DataGroup 
			id="pdmlNodesView" width="100%" height="100%" 
			itemRendererFunction="{this.getAsPdmlNodeView}"
			dataProvider="{this.pdmlFile.nodes}"
			rendererAdd="onRendererAdd(event)"
			rendererRemove="onRendererRemove(event)">
		<s:layout>
			<s:VerticalLayout gap="1" />
		</s:layout>
	</s:DataGroup>
		
	
</s:Group>
