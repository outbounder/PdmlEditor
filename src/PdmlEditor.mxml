<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/halo"
	xmlns:pdml="components.pdml.*" 
	xmlns:modules="components.modules.*"
	xmlns:repo="components.repo.*"
	xmlns:websector="http://websector.de"
	width="800" height="600"
	currentState="loading"
	preinitialize="onPreinitialize()"
	creationComplete="onCreationComplete()">
	
	<fx:Script>
		<![CDATA[
			import data.RuntimeContext;
			import data.model.MultiModuleInfo;
			
			import flash.Boot;
			import flash.display.MovieClip;
			import flash.events.DataEvent;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			
			import org.dassista.api.rest.as3.IRestServiceContext;
			import org.dassista.api.rest.as3.RestService;
			
			[Bindable]
			private var modulesList:ArrayCollection;
			
			[Bindable]
			private var rootFolder:File;
			
			[Bindable]
			private var restService:org.dassista.api.rest.as3.RestService;
			
			[Bindable]
			private var updateFile:File;
			
			private function onPreinitialize():void
			{
				var boot:Boot = new Boot(this.stage as MovieClip); // haxe boot
			}

			private function onCreationComplete():void
			{
				// init the rest service
				this.restService = new RestService();
				
				// prepare repoInfoContext
				var repoInfoContext:IRestServiceContext = this.restService.clone();
				repoInfoContext.setValue("moduleName", "org.dassista.modules.RepoInfo");
				repoInfoContext.setValue("methodName", "getRootFolderRealPath");
				
				// load module result
				this.restService.loadModuleResult(repoInfoContext, onGetRootFolderRealPathResult);
				
				this.updateFile = File.applicationDirectory.resolvePath('./assets/updater.xml');
				this.nativeWindow.title = "PdmlEditor - "+this.appUpdater.getApplicationVersion();
			}
					
			private function onGetRootFolderRealPathResult(e:DataEvent):void
			{
				var rootFolderXML:XML = XML(e.data);
				if(rootFolderXML.name()=="ioerror")
				{
					this.currentState = "resterror";
					return;
				}
				
				var context:RuntimeContext = new RuntimeContext();
				context.rootFolder = rootFolderXML.text();
				this.rootFolder = new File(rootFolderXML.text());
				
				// module info
				var moduleInfoContext:IRestServiceContext = this.restService.clone();
				moduleInfoContext.setValue("moduleName", "org.dassista.modules.ModuleInfo");
				moduleInfoContext.setValue("methodName", "execute");
				moduleInfoContext.setValue("target", "_app.org.dassista.modules");
				
				this.restService.loadModuleResult(moduleInfoContext, onModuleInfoResult);
			}
			
			private function onModuleInfoResult(e:DataEvent):void
			{
				this.modulesList = new ArrayCollection();
				
				var result:XML = XML("<result>"+e.data+"</result>");
				for each(var node:XML in result.children())
					this.modulesList.addItem(new MultiModuleInfo(node));
					
				this.currentState = "intialized";
			}
		]]>
	</fx:Script>


	<s:states>
		<s:State name="loading" />
		<s:State name="intialized" />
		<s:State name="resterror" />
	</s:states>
	
	<s:VGroup horizontalCenter="0" verticalCenter="0" includeIn="resterror">
		<s:RichText text="Can not access http://pdrepo.dev, please ensure DAssistA rest service is running"/>
		<s:Button label="try starting DAssistA rest service" click="{Alert.show('not implemented')}"/>
	</s:VGroup>
	
		
	<mx:HDividedBox width="100%" height="100%" includeIn="intialized">
		<mx:VDividedBox width="50%" height="100%">
			<repo:RepoBrowserTree width="100%" height="100%" rootFolder="{this.rootFolder}" />
			<modules:ModulesPool width="100%" height="100%" modulesList="{this.modulesList}"  />	
		</mx:VDividedBox>
		<pdml:PdmlScript width="50%" height="100%" />
	</mx:HDividedBox>
	
	<websector:ApplicationUpdaterUI
			id="appUpdater"
			horizontalCenter="0"
			verticalCenter="0"
			invisibleCheck="true"
			useWindow="false"
			skinClass="de.websector.utils.updater.ui.skins.silver.AppUpdaterUISilverSkin"
			configurationFile="{this.updateFile}"/>
			
	
</s:WindowedApplication>
